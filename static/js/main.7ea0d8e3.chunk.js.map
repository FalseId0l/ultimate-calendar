{"version":3,"sources":["components/MiniCalendar/components/DateSelectorHeader.js","components/MiniCalendar/components/DateSelector.js","components/MiniCalendar/components/Header.js","components/MiniCalendar/MiniCalendar.js","components/FullCalendar/components/Header/Header.js","components/FullCalendar/components/CreateEvent/CreateEvent.js","components/FullCalendar/components/ShowEvent/ShowEvent.js","components/FullCalendar/components/TimeIndicator/TimeIndicator.js","components/FullCalendar/components/DayView/DayView.js","components/FullCalendar/components/WeekView/WeekView.js","components/FullCalendar/components/MonthView/MonthView.js","components/FullCalendar/components/YearView/YearView.js","components/FullCalendar/FullCalendar.js","View.js","App.js","index.js"],"names":["CalendarHeader","month","this","props","selectedDate","dropDownItems","startOfTheYear","startOfYear","i","push","addMonths","calendarTitle","format","Navbar","bg","onSelect","changeMonth","className","onClick","switchYears","switchDates","Collapse","id","Nav","NavDropdown","title","map","item","index","Item","eventKey","key","React","Component","DateSelector","setDate","bind","updateDate","onHide","showDate","startOfTheMonth","startOfMonth","startOfTheWeek","startOfWeek","endOfTheMonth","endOfMonth","backBy1Week","subDays","days","addDays","show","handleClose","onShow","handleShow","Table","date","idx","Header","checkDate","checkMonth","checkYear","value","length","changeYear","console","log","placeholder","options","datePattern","delimiter","onChange","onFocus","onBlur","MiniCalendar","state","setState","arg","setYear","setMonth","subMonths","subYears","addYears","monthVisible","calendarMode","switchView","Brand","handleUpdate","Toggle","aria-controls","Link","Form","inline","FormControl","type","Button","variant","CreateEvent","dateStart","hour","dateEnd","changeStartHour","changeEndHour","getEventData","val","preventDefault","data","day","getRandomColor","color","Math","floor","random","getHourDateFormat","time","split","merediem","hours","minutes","parseInt","newDate","addHours","addMinutes","view","target","eventSummary","eventDescription","startDate","formBasicStartTime","startOfDay","toJSON","Intl","DateTimeFormat","resolvedOptions","timeZone","endDate","formBasicEndTime","updateData","hourSelected","startOfTheDay","hourList","Modal","backdrop","keyboard","closeButton","Title","Body","onSubmit","Group","controlId","Label","Control","autoComplete","defaultValue","list","event","Footer","ShowEvent","context","style","buttonStyle","eventData","summary","description","parseISO","start","utcToZonedTime","dateTime","end","TimeIndicator","today","Date","currentDate","indicatorPosition","hour1","hour2","marginTop","differenceInMinutes","mode","hourOfTheDay","isSameHour","DayView","myEvents","loadData","dateSelected","weekMatrix","dayMatrix","j","currentDay","currentHour","filter","undefined","isSameDay","eventStart","getEventDuration","evt","getEventStart","eventEnd","getEventEnd","getLongestEventDuration","evtList","longestDuration","duration","getRowStyle","height","getColumnStyle","backgroundColor","colorId","getEventColor","getMinutes","getButtonStyle","setCurrentDay","textDecoration","bordered","hourAndEvents","cellValue","Container","Row","events","Col","toString","WeekView","MonthView","YearView","allMonthsAndDays","thisMonth","sm","FullCalendar","selectedDayView","subWeeks","addWeeks","fullData","forEach","arg1","setToday","View","md","updateDates","App","expand","href","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.7ea0d8e3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { format, startOfYear, addMonths } from \"date-fns\";\r\nimport { Nav, Navbar, NavDropdown} from \"react-bootstrap\";\r\nimport { MdChevronLeft, MdChevronRight } from \"react-icons/md\";\r\nimport { FiChevronsLeft, FiChevronsRight } from \"react-icons/fi\";\r\n\r\nclass CalendarHeader extends React.Component{\r\n\r\n\r\n    render() {\r\n\r\n        let month = this.props.selectedDate;\r\n        //console.log(this.props);\r\n        let dropDownItems = [];\r\n\r\n        let startOfTheYear = startOfYear(month);\r\n\r\n        for(let i = 0; i < 12; i++){\r\n            dropDownItems.push(startOfTheYear);\r\n            startOfTheYear = addMonths(startOfTheYear,1);\r\n        }\r\n\r\n        let calendarTitle = format(month, \"MMM yyyy\");\r\n\r\n        return (\r\n            <Navbar bg=\"light\" onSelect={this.props.changeMonth}>\r\n                <div className=\"switchYearPrevious\" onClick={() => this.props.switchYears(\"Previous\")}>\r\n                    <FiChevronsLeft />\r\n                </div>\r\n                <div className=\"switchMonthPrevious\" onClick={() => this.props.switchDates(\"Previous\")}>\r\n                    <MdChevronLeft />\r\n                </div>\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <NavDropdown title={calendarTitle} id=\"basic-nav-dropdown\">\r\n                            {\r\n                                dropDownItems.map((item, index) => {\r\n                                    return(\r\n                                        <NavDropdown.Item eventKey={index} key={index}>\r\n                                            {\r\n                                                format(item, \"MMMM\")\r\n                                            }\r\n                                        </NavDropdown.Item>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </NavDropdown>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n                <div className=\"switchMonthNext\" onClick={() => this.props.switchDates(\"Next\")}>\r\n                    <MdChevronRight />\r\n                </div>\r\n                <div className=\"switchYearNext\" onClick={() => this.props.switchYears(\"Next\")}>\r\n                    <FiChevronsRight />\r\n                </div>\r\n\r\n            </Navbar>\r\n\r\n        );\r\n    };\r\n}\r\n\r\nexport default CalendarHeader;","import React from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport {\r\n    format, startOfMonth, startOfWeek,\r\n    endOfMonth, subDays, addDays,\r\n} from \"date-fns\";\r\nimport CalendarHeader from \"components/MiniCalendar/components/DateSelectorHeader\";\r\n\r\nclass DateSelector extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.setDate = this.setDate.bind(this);\r\n\r\n    }\r\n\r\n    setDate(selectedDate){\r\n        //console.log(selectedDate);\r\n        this.props.updateDate(selectedDate);\r\n        this.props.onHide();\r\n    }\r\n\r\n    render(){\r\n\r\n        let month = [];\r\n\r\n        let showDate = this.props.selectedDate;\r\n\r\n\r\n        //console.log(showDate);\r\n\r\n        let startOfTheMonth = startOfMonth(showDate);\r\n        let startOfTheWeek = startOfWeek(startOfTheMonth);\r\n        let endOfTheMonth = endOfMonth(showDate);\r\n        let backBy1Week = subDays(startOfTheWeek,7);\r\n        while(backBy1Week < endOfTheMonth){\r\n            let days = [];\r\n            for(let i = 0; i < 7; i++){\r\n                days.push(backBy1Week);\r\n                backBy1Week = addDays(backBy1Week,1);\r\n            }\r\n\r\n            month.push(days);\r\n        }\r\n\r\n        if(this.props.show === false){\r\n            return null;\r\n        }\r\n        else {\r\n            return (\r\n                <div className=\"calendarOpen\">\r\n                    <CalendarHeader selectedDate={showDate}\r\n                                    switchDates={this.props.switchDates}\r\n                                    changeMonth={this.props.changeMonth}\r\n                                    switchYears={this.props.switchYears}\r\n                                    show={this.props.show}\r\n                                    onHide={this.handleClose}\r\n                                    onShow={this.handleShow}\r\n                    />\r\n                    <Table>\r\n                        <thead>\r\n                        <tr>\r\n                            {\r\n                                month[0].map((item, index) => {\r\n                                    return (\r\n                                        <th key={index}>\r\n                                            {\r\n                                                format(item, \"ccc\")\r\n                                            }\r\n                                        </th>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {\r\n                            month.map((item, index) => {\r\n                                if (index !== 0) {\r\n                                    return (\r\n                                        <tr key={index}>\r\n                                            {\r\n                                                item.map((date, idx) => {\r\n                                                    return (\r\n                                                        <th key={idx} onClick={() => this.setDate(date)}>\r\n                                                            {\r\n                                                                format(date, \"d\")\r\n                                                            }\r\n                                                        </th>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </tr>\r\n                                    )\r\n                                } else {\r\n                                    return null;\r\n                                }\r\n                            })\r\n                        }\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default DateSelector;","import React from \"react\";\r\nimport { AiOutlineCalendar } from \"react-icons/ai\";\r\nimport { format } from \"date-fns\";\r\nimport Cleave from \"cleave.js/react\";\r\n\r\nclass Header extends React.Component{\r\n\r\n    constructor (props) {\r\n        super(props);\r\n        this.checkDate = this.checkDate.bind(this);\r\n        this.checkMonth = this.checkMonth.bind(this);\r\n        this.checkYear = this.checkYear.bind(this);\r\n    }\r\n\r\n    checkDate(value){\r\n        //console.log(event);\r\n        if(value < 0 || value > 31 ||value.length > 2){\r\n            this.props.updateDate(this.props.selectedDate);\r\n        }\r\n    }\r\n\r\n    checkMonth(value){\r\n        //console.log(parseInt(value));\r\n\r\n        if(value > 0){\r\n\r\n            if(value < 0 || value > 12 || value.length > 2){\r\n                this.props.updateDate(this.props.selectedDate);\r\n            }\r\n            else{\r\n                this.props.changeMonth(value - 1);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    checkYear(value){\r\n        //console.log(event);\r\n\r\n        if(value > 0){\r\n            if(value < 0 || value > 9999 || value.length > 4){\r\n                this.props.updateDate(this.props.selectedDate);\r\n            }\r\n            else{\r\n                this.props.changeYear(value - 1);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n        console.log(this.props.selectedDate);\r\n        return(\r\n            <div className={\"dateSelector\"}>\r\n                <Cleave\r\n                    className=\"dateSelectorInput\"\r\n                    placeholder=\"yyyy-MM-dd\"\r\n                    options={{ date: true,\r\n                        datePattern: [\"Y\", \"m\", \"d\"],\r\n                        delimiter: '-'}}\r\n                    onChange={this.handleShow}\r\n                    value={format(this.props.selectedDate, \"yyyy-MM-dd\")}\r\n                    onFocus={this.props.onShow}\r\n                    onBlur={this.props.onHide}\r\n                    id={this.props.className}\r\n                />\r\n                <div className=\"calendarIcon\"\r\n                     onClick={this.props.show ? this.props.onHide : this.props.onShow}>\r\n                    <AiOutlineCalendar />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport { addMonths, addYears, setMonth,\r\n    setYear, subMonths, subYears} from \"date-fns\";\r\nimport DateSelector from \"components/MiniCalendar/components/DateSelector\";\r\nimport Header from \"components/MiniCalendar/components/Header\";\r\n\r\nclass MiniCalendar extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            selectedDate: this.props.selectedDate,\r\n            show: false\r\n        };\r\n\r\n        this.changeMonth = this.changeMonth.bind(this);\r\n        this.changeYear = this.changeYear.bind(this);\r\n\r\n        this.switchDates = this.switchDates.bind(this);\r\n        this.switchYears = this.switchYears.bind(this);\r\n\r\n        this.handleShow = this.handleShow.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n\r\n        this.updateDate = this.updateDate.bind(this);\r\n    }\r\n\r\n    handleClose() {\r\n        //console.log(\"hide\");\r\n        this.setState({ show: false });\r\n    }\r\n\r\n    handleShow() {\r\n        //console.log(\"show\");\r\n        this.setState({ show: true });\r\n    }\r\n\r\n    changeYear(arg){\r\n        //console.log(arg);\r\n        this.setState({selectedDate: setYear(this.state.selectedDate, arg)});\r\n    }\r\n\r\n    changeMonth(arg){\r\n        //console.log(\"here3\");\r\n        this.setState({selectedDate: setMonth(this.state.selectedDate, arg)});\r\n    }\r\n\r\n    switchDates(arg){\r\n        if (arg === \"Previous\") {\r\n            this.setState({selectedDate: subMonths(this.state.selectedDate, 1)});\r\n        } else {\r\n            this.setState({selectedDate: addMonths(this.state.selectedDate, 1)});\r\n        }\r\n\r\n    }\r\n\r\n    switchYears(arg){\r\n        if (arg === \"Previous\") {\r\n            this.setState({selectedDate: subYears(this.state.selectedDate, 1)});\r\n        } else {\r\n            this.setState({selectedDate: addYears(this.state.selectedDate, 1)});\r\n        }\r\n\r\n    }\r\n\r\n    updateDate(arg){\r\n        //console.log(\"here\");\r\n        this.setState({selectedDate: arg});\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div>\r\n                <Header selectedDate={this.state.selectedDate} changeMonth={this.changeMonth}\r\n                        changeYear={this.changeYear} show={this.state.show}\r\n                        onHide={this.handleClose} onShow={this.handleShow}\r\n                        updateDate = {this.updateDate} className={this.props.className}/>\r\n                <DateSelector selectedDate={this.state.selectedDate} changeMonth={this.changeMonth}\r\n                          switchDates = {this.switchDates} switchYears = {this.switchYears}\r\n                          show={this.state.show} onHide={this.handleClose}\r\n                          updateDate = {this.updateDate}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MiniCalendar;","import React from \"react\";\r\nimport { MdChevronLeft, MdChevronRight } from \"react-icons/md\";\r\nimport format from \"date-fns/format\";\r\nimport { Button, Navbar, Nav, NavDropdown, Form, FormControl } from \"react-bootstrap\";\r\n\r\n\r\n\r\nclass Header extends React.Component {\r\n\r\n\r\n    render() {\r\n\r\n        const month = this.props.selectedDate;\r\n        //console.log(this.props);\r\n        let monthVisible;\r\n\r\n        switch(this.props.calendarMode) {\r\n            case \"Year\":\r\n                monthVisible = <span>{format(month, \"yyyy\")}</span>\r\n                break;\r\n            default:\r\n                monthVisible = <div>\r\n                    <span>{format(month, \"MMMM\")}</span>\r\n                    {'  '}\r\n                    <span>{format(month, \"yyyy\")}</span>\r\n                </div>\r\n                break;\r\n        }\r\n\r\n        return (\r\n                <Navbar bg=\"light\" onSelect={this.props.switchView}>\r\n                    <Navbar.Brand>Ultimate Calendar\r\n                        {' '}\r\n                    </Navbar.Brand>\r\n                    <MdChevronLeft onClick={() => this.props.handleUpdate(\"Previous\")}/>\r\n                    <MdChevronRight onClick={() => this.props.handleUpdate(\"Next\")}/>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Nav.Link eventKey=\"Today\">Today</Nav.Link>\r\n                    {monthVisible}\r\n                    {'     '}\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <NavDropdown title={this.props.calendarMode} id=\"basic-nav-dropdown\">\r\n                                <NavDropdown.Item eventKey=\"Day\">Day</NavDropdown.Item>\r\n                                <NavDropdown.Item eventKey=\"Week\">Week</NavDropdown.Item>\r\n                                <NavDropdown.Item eventKey=\"Month\">Month</NavDropdown.Item>\r\n                                <NavDropdown.Item eventKey=\"Year\">Year</NavDropdown.Item>\r\n                            </NavDropdown>\r\n                        </Nav>\r\n                        <Form inline>\r\n                            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n                            <Button variant=\"outline-success\">Search</Button>\r\n                        </Form>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n\r\n        );\r\n    };\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport { Modal, Form, Button } from \"react-bootstrap\";\r\nimport { format, startOfDay, addHours,\r\n        startOfWeek, addDays, addMinutes } from \"date-fns\";\r\nimport MiniCalendar from \"components/MiniCalendar/MiniCalendar\";\r\nimport \"assets/scss/MiniCalendar/MiniCalendar.scss\";\r\n\r\n\r\nclass CreateEvent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            show: false,\r\n            dateStart: this.props.hour,\r\n            dateEnd: this.props.hour+1,\r\n        };\r\n\r\n        this.handleShow = this.handleShow.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.changeStartHour = this.changeStartHour.bind(this);\r\n        this.changeEndHour = this.changeEndHour.bind(this);\r\n        this.getEventData = this.getEventData.bind(this);\r\n\r\n    }\r\n\r\n\r\n    handleClose() {\r\n        this.setState({ show: false });\r\n    }\r\n\r\n    handleShow() {\r\n        this.setState({ show: true });\r\n    }\r\n\r\n    changeStartHour(value) {\r\n        this.setState({\r\n            dateStart: value\r\n        })\r\n    }\r\n\r\n    changeEndHour(value) {\r\n        this.setState({\r\n            dateEnd: value\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    getEventData(val){\r\n        //console.log(val.target.startDate.value);\r\n        val.preventDefault();\r\n\r\n        let startOfTheWeek = startOfWeek(this.props.selectedDate);\r\n        let date = addDays(startOfTheWeek, this.props.day);\r\n\r\n        function getRandomColor() {\r\n            var letters = '0123456789ABCDEF';\r\n            var color = '#';\r\n            for (var i = 0; i < 6; i++) {\r\n                color += letters[Math.floor(Math.random() * 16)];\r\n            }\r\n            return color;\r\n        }\r\n\r\n        function getHourDateFormat(val, date){\r\n            //console.log(val);\r\n            let time = val.split(\" \")[0];\r\n            let merediem = val.split(\" \")[1];\r\n            let hours = time.split(\":\")[0];\r\n            let minutes = time.split(\":\")[1];\r\n            if(merediem === \"PM\"){\r\n                hours = parseInt(hours)+12;\r\n            }\r\n\r\n            //console.log(hours, minutes, merediem);\r\n            let newDate = addHours(date, hours);\r\n            newDate = addMinutes(newDate, parseInt(minutes));\r\n            return newDate;\r\n        }\r\n\r\n        let data;\r\n\r\n        if(this.props.view === \"day\"){\r\n            data = {\r\n                \"summary\": val.target.eventSummary.value,\r\n                \"description\": val.target.eventDescription.value,\r\n                \"colorId\": getRandomColor(),\r\n                \"start\": {\r\n                    \"date\": val.target.startDate.value,\r\n                    \"dateTime\": getHourDateFormat(val.target.formBasicStartTime.value,\r\n                        startOfDay(this.props.selectedDate)).toJSON(),\r\n                    \"timeZone\": Intl.DateTimeFormat().resolvedOptions().timeZone\r\n                },\r\n                \"end\": {\r\n                    \"date\": val.target.endDate.value,\r\n                    \"dateTime\": getHourDateFormat(val.target.formBasicEndTime.value,\r\n                        startOfDay(this.props.selectedDate)).toJSON(),\r\n                    \"timeZone\": Intl.DateTimeFormat().resolvedOptions().timeZone\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            data = {\r\n                \"summary\": val.target.eventSummary.value,\r\n                \"description\": val.target.eventDescription.value,\r\n                \"colorId\": getRandomColor(),\r\n                \"start\": {\r\n                    \"date\": val.target.startDate.value,\r\n                    \"dateTime\": getHourDateFormat(val.target.formBasicStartTime.value, date).toJSON(),\r\n                    \"timeZone\": Intl.DateTimeFormat().resolvedOptions().timeZone\r\n                },\r\n                \"end\": {\r\n                    \"date\": val.target.endDate.value,\r\n                    \"dateTime\": getHourDateFormat(val.target.formBasicEndTime.value, date).toJSON(),\r\n                    \"timeZone\": Intl.DateTimeFormat().resolvedOptions().timeZone\r\n                }\r\n            }\r\n        }\r\n\r\n        console.log(data);\r\n        this.props.updateData(data);\r\n        this.handleClose();\r\n    }\r\n\r\n    render() {\r\n        //console.log(this.props);\r\n        let hourSelected = this.props.hour;\r\n        let startOfTheDay = startOfDay(this.props.selectedDate);\r\n\r\n        let hourList = [];\r\n        for(let i = 0; i < 24; i++){\r\n            hourList.push(format(addHours(startOfTheDay,i), \"hh:mm a\"));\r\n        }\r\n\r\n\r\n        return (\r\n            <>\r\n                <Button className=\"createEvent\" variant=\"primary\" onClick={this.handleShow}>\r\n                </Button>\r\n\r\n                <Modal\r\n                    show={this.state.show}\r\n                    onHide={this.handleClose}\r\n                    backdrop=\"static\"\r\n                    keyboard={false}\r\n                >\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Create a new Event</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Form id=\"eventData\" onSubmit={this.getEventData}>\r\n                            <Form.Group controlId=\"eventSummary\">\r\n                                <Form.Label>Event Summary</Form.Label>\r\n                                <Form.Control type=\"textarea\" placeholder=\"Type Something...\" />\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"eventDescription\">\r\n                                <Form.Label>Event Description</Form.Label>\r\n                                <Form.Control type=\"textarea\" placeholder=\"Type Something...\" />\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"eventStartDate\">\r\n                                <Form.Label>Event Start Date</Form.Label>\r\n                                <MiniCalendar className=\"startDate\"\r\n                                              selectedDate={ this.props.view === \"day\" ?\r\n                                                  addDays(this.props.selectedDate, this.props.day) :\r\n                                                  addDays(startOfWeek(this.props.selectedDate),\r\n                                                  this.props.day)}/>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId=\"formBasicStartTime\" autoComplete={\"nope\"}>\r\n                                <Form.Label>Start Time</Form.Label>\r\n\r\n                                <Form.Control type=\"textarea\"\r\n                                              defaultValue={format(addHours(startOfTheDay,hourSelected),\r\n                                                  \"hh:mm a\")}\r\n                                              placeholder=\"Enter Start Time\" list=\"hours\"\r\n                                              autoComplete={\"nope\"}\r\n                                              onChange={(event) => {\r\n                                                  this.changeStartHour = event.target.value\r\n                                              }}/>\r\n                                <datalist id=\"hours\" >\r\n                                    {\r\n                                        hourList.map((item, index) => {\r\n                                            return(\r\n                                                <option key={index} value={item}/>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </datalist>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"formBasicEndTime\">\r\n                                <Form.Label>End Time</Form.Label>\r\n                                <Form.Control type=\"textarea\"\r\n                                              defaultValue={format(addHours(startOfTheDay,hourSelected+1),\r\n                                                  \"hh:mm a\")}\r\n                                              placeholder=\"Enter End Time\" list=\"hours\"\r\n                                              autoComplete={\"nope\"}\r\n                                              onChange={(event) => {\r\n                                                  this.changeEndHour = event.target.value\r\n                                              }}/>\r\n                                <datalist id=\"hours\" >\r\n                                    {\r\n                                        hourList.map((item, index) => {\r\n                                            return(\r\n                                                <option key={index} value={item}/>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </datalist>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"eventEndDate\">\r\n                                <Form.Label>Event End Date</Form.Label>\r\n                                <MiniCalendar className=\"endDate\"\r\n                                              selectedDate={ this.props.view === \"day\" ?\r\n                                                  addDays(this.props.selectedDate, this.props.day) :\r\n                                                  addDays(startOfWeek(this.props.selectedDate),\r\n                                                      this.props.day)}/>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"formBasicCreatorUser\">\r\n                                <Form.Label>Creator</Form.Label>\r\n                                <Form.Control type=\"textarea\" placeholder=\"Creator Username\" />\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"formBasicOrganizer\">\r\n                                <Form.Label>Organizer</Form.Label>\r\n                                <Form.Control type=\"textarea\" placeholder=\"Organizer Username\" />\r\n                            </Form.Group>\r\n                            <Modal.Footer>\r\n                                <Button variant=\"primary\" type=\"submit\">\r\n                                    Submit\r\n                                </Button>\r\n                            </Modal.Footer>\r\n                        </Form>\r\n\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreateEvent;","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport {format, parseISO } from \"date-fns\";\r\nimport { utcToZonedTime } from \"date-fns-tz\";\r\n\r\n\r\nclass ShowEvent extends React.Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n\r\n        this.handleShow = this.handleShow.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.state = {\r\n            show: false,\r\n        };\r\n    }\r\n\r\n    handleClose() {\r\n        this.setState({ show: false });\r\n    }\r\n\r\n    handleShow() {\r\n        this.setState({ show: true });\r\n    }\r\n\r\n    render() {\r\n        //console.log(this.props);\r\n        return (\r\n            <>\r\n                <Button className=\"showEvent\" style={this.props.buttonStyle} variant=\"primary\"\r\n                        onClick={this.handleShow}>\r\n                </Button>\r\n\r\n                <Modal\r\n                    show={this.state.show}\r\n                    onHide={this.handleClose}\r\n                    backdrop=\"static\"\r\n                    keyboard={false}\r\n                >\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>{this.props.eventData.summary}</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className=\"showEventDescription\">{this.props.eventData.description}</div>\r\n                        <div className=\"showEventDuration\">\r\n                            <div className={\"showEventDate\"}>\r\n                                Date\r\n                                {format(parseISO(this.props.eventData.start.date), \"ccc, MMM dd\")}\r\n                            </div>\r\n                            <div className={\"showEventTime\"}>\r\n                                <div className={\"showEventStartTime\"}>\r\n                                    {format(utcToZonedTime(parseISO(this.props.eventData.start.dateTime),\r\n                                        this.props.eventData.start.timeZone), \"H:mm\")}\r\n                                </div>\r\n                                <div className={\"showEventEndTime\"}>\r\n                                    {format(utcToZonedTime(parseISO(this.props.eventData.end.dateTime),\r\n                                        this.props.eventData.end.timeZone), \"H:mm\")}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button onClick={this.handleClose}>\r\n                            Reschedule\r\n                        </Button>\r\n                        <Button >Edit</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ShowEvent;","import React from \"react\";\r\nimport { startOfWeek, addDays, addHours, isSameHour, startOfDay, differenceInMinutes } from \"date-fns\";\r\n\r\nclass TimeIndicator extends React.Component{\r\n\r\n\r\n    render(){\r\n\r\n        //console.log(this.props);\r\n        let today = new Date();\r\n        let hours = this.props.hour;\r\n        let days = this.props.day;\r\n        let selectedDate = this.props.currentDate;\r\n\r\n        function indicatorPosition(hour1, hour2){\r\n            let minuteDifference = differenceInMinutes(hour2, hour1);\r\n            return({\r\n                marginTop: -4 + minuteDifference/60*49 +\"px\"\r\n            })\r\n        }\r\n\r\n        if(this.props.mode === \"Day\"){\r\n            //console.log(this.props);\r\n            let startOfTheDay = startOfDay(selectedDate);\r\n            if(hours >= 0){\r\n                let hourOfTheDay = addHours(startOfTheDay, hours);\r\n                if(isSameHour(hourOfTheDay, today)){\r\n                    return(\r\n                        <div style={indicatorPosition(hourOfTheDay, today)} className=\"timeIndicator\">\r\n                            <div className=\"ballEnd\" />\r\n                            <div className=\"lineEnd\" />\r\n                        </div>\r\n                    )\r\n                }\r\n                else{\r\n                    return null;\r\n                }\r\n            }\r\n            else{\r\n                return null;\r\n            }\r\n        }\r\n        else if(this.props.mode === \"Week\"){\r\n            let startOfTheWeek = startOfWeek(selectedDate);\r\n            let startOfTheDay = addDays(startOfTheWeek, days);\r\n            if(hours >= 0){\r\n                let hourOfTheDay = addHours(startOfTheDay, hours);\r\n                if(isSameHour(hourOfTheDay, today)){\r\n                    return(\r\n                        <div style={indicatorPosition(hourOfTheDay, today)} className=\"timeIndicator\">\r\n                            <div className=\"ballEnd\" />\r\n                            <div className=\"lineEnd\" />\r\n                        </div>\r\n                    )\r\n                }\r\n                else{\r\n                    return null;\r\n                }\r\n            }\r\n            else{\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default TimeIndicator;","import React from \"react\";\r\nimport {\r\n    startOfDay, format, addDays, addHours, parseISO,\r\n    isSameDay, differenceInMinutes, isSameHour, getMinutes\r\n} from \"date-fns\";\r\nimport { Table, Container, Col, Row } from \"react-bootstrap\";\r\nimport { utcToZonedTime } from \"date-fns-tz\";\r\nimport CreateEvent from \"../CreateEvent/CreateEvent\";\r\nimport ShowEvent from \"../ShowEvent/ShowEvent\";\r\nimport TimeIndicator from \"../TimeIndicator/TimeIndicator\";\r\n\r\nclass DayView extends React.Component {\r\n\r\n    render() {\r\n\r\n        let today = this.props.currentDate;\r\n\r\n        //console.log(this.props.selectedDate);\r\n        const myEvents = this.props.loadData;\r\n        const dateSelected = this.props.selectedDate;\r\n        const startOfTheDay = startOfDay(dateSelected);\r\n\r\n        let weekMatrix = [];\r\n\r\n        //Week Matrix where Row 0 is the header of the Calendar\r\n        //and Row 1 is the row containing all the events of the\r\n        //respective days.\r\n        //Rows 2 through 26 contain the events of hours 0-24.\r\n        //Columns 1 through 8 contain the events of the 7-day\r\n        //period.\r\n\r\n        for(let i = 0; i < 26; i++){\r\n            let dayMatrix = [];\r\n            for(let j = 0; j < 2; j++){\r\n                let currentDay = addDays(startOfTheDay,j-1);\r\n                let currentHour = addHours(currentDay, i-2);\r\n                if(i === 0 && j === 0){\r\n                    //This is the empty spot on the Calendar\r\n                    //on the Top-Left-most cell.\r\n                    dayMatrix.push(currentDay);\r\n\r\n                }\r\n                else if(i === 0){\r\n                    //Header values, which includes Days of\r\n                    //the week.\r\n                    dayMatrix.push(currentDay);\r\n                }\r\n                else if(i === 1){\r\n                    if(j === 0){\r\n                        //Setting the TimeZone value.\r\n                        dayMatrix.push(dateSelected);\r\n                    }\r\n                    else{\r\n                        //Adding all the all-day events for\r\n                        //the selected days of the week.\r\n                        dayMatrix.push(myEvents.filter((item) => {\r\n                            if (item.start.dateTime === undefined) {\r\n                                if (isSameDay(currentHour, parseISO(item.start.date))) {\r\n                                    return {\r\n                                        \"event\": item\r\n                                    }\r\n                                } else {\r\n                                    return 0;\r\n                                }\r\n                            }\r\n                            else{\r\n                                return 0;\r\n                            }\r\n                        }));\r\n                    }\r\n                }\r\n                else if(j === 0){\r\n                    //Hour values of the calendar.\r\n                    dayMatrix.push(currentHour);\r\n                }\r\n                else{\r\n                    dayMatrix.push(myEvents.filter((item) => {\r\n                        let eventStart = utcToZonedTime(parseISO(item.start.dateTime), item.start.timeZone);\r\n                        //let eventEnd = utcToZonedTime(parseISO(item.end.dateTime), item.end.timeZone);\r\n                        if (isSameHour(currentHour, eventStart))\r\n                        {\r\n                            return {\r\n                                \"event\": item\r\n                            }\r\n                        } else {\r\n                            return 0\r\n                        }\r\n                    }))\r\n                }\r\n            }\r\n            weekMatrix.push(dayMatrix);\r\n        }\r\n\r\n        function getEventColor(evt){\r\n            return(evt.colorId);\r\n        }\r\n\r\n        function getEventDuration(evt){\r\n            let eventStart = getEventStart(evt);\r\n            let eventEnd = getEventEnd(evt);\r\n            return(differenceInMinutes(eventEnd, eventStart));\r\n        }\r\n\r\n        function getEventStart(evt){\r\n            return utcToZonedTime(parseISO(evt.start.dateTime), evt.start.timeZone);\r\n        }\r\n\r\n        function getEventEnd(evt){\r\n            return utcToZonedTime(parseISO(evt.end.dateTime), evt.end.timeZone);\r\n        }\r\n\r\n        function getLongestEventDuration(evtList){\r\n\r\n            let longestDuration = 0;\r\n            let duration = [];\r\n\r\n            duration.push(evtList.map(item => {\r\n                return(getEventDuration(item))\r\n            }));\r\n\r\n            for(let i = 0; i < duration.length; i++){\r\n                if (duration[i] > longestDuration){\r\n                    longestDuration = duration;\r\n                }\r\n            }\r\n\r\n            return longestDuration;\r\n\r\n        }\r\n\r\n        function getContainerStyle(evt){\r\n            if(evt.length){\r\n                //console.log(evt);\r\n                return({height: getLongestEventDuration(evt)*49/60+\"px\"});\r\n            }\r\n            else{\r\n                return({height: 0});\r\n            }\r\n        }\r\n\r\n        function getRowStyle(evt){\r\n            if(evt.length){\r\n                //console.log(evt);\r\n                return({height: getLongestEventDuration(evt)*49/60+\"px\"});\r\n            }\r\n            else{\r\n                return({height: 0});\r\n            }\r\n        }\r\n\r\n        function getColumnStyle(evt){\r\n            let eventDuration = getEventDuration(evt);\r\n            let eventColor = getEventColor(evt);\r\n            return({height: eventDuration*49/60+\"px\",\r\n                backgroundColor: eventColor,\r\n                marginTop: getMinutes(getEventStart(evt))*49/60+\"px\"});\r\n        }\r\n\r\n        function getButtonStyle(evt){\r\n            let eventDuration = getEventDuration(evt);\r\n            return({height: eventDuration*49/60+\"px\"});\r\n        }\r\n\r\n        function setCurrentDay(item) {\r\n            console.log(item);\r\n            if(isSameDay(today, item)){\r\n                return {\r\n                    textDecoration: \"underline crimson\",\r\n                }\r\n            }\r\n            else{\r\n                return{\r\n                    textDecoration: \"none\"\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Table bordered className=\"dayViewTable\">\r\n                <thead>\r\n                <tr>\r\n                    {\r\n                        weekMatrix[0].map((item, index) => {\r\n                            //Header values, which includes Days of\r\n                            //the week.\r\n                            if (index===0){\r\n                                return(\r\n                                    <th className=\"firstColumn\" key={index}>\r\n\r\n                                    </th>\r\n                                )\r\n                            }\r\n                            else{\r\n                                return (\r\n                                    <th style={setCurrentDay(item)} key={index}>\r\n                                        {format((item), 'dd ccc')}\r\n                                    </th>\r\n                                )\r\n                            }\r\n\r\n                        })\r\n                    }\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {\r\n                    weekMatrix.map((hourAndEvents, i) => {\r\n                        if(i!== 0){\r\n                            return(\r\n                                <tr  key={i}>\r\n                                    {\r\n                                        hourAndEvents.map((cellValue, j) => {\r\n                                            if(i === 1 && j === 0){\r\n                                                //Setting the TimeZone value.\r\n                                                return(\r\n                                                    <td className=\"timeZone\" key={j}>\r\n                                                        <div className=\"timeZoneValue\"  key={j}>\r\n                                                            {format(dateSelected, 'OOOO')}\r\n                                                        </div>\r\n                                                    </td>\r\n                                                )\r\n                                            }\r\n                                            else if(j === 0){\r\n                                                //Hour values of the calendar.\r\n                                                return(\r\n                                                    <td className=\"hours\" key={j}>\r\n                                                        <div key={j}>\r\n                                                            {format(cellValue, 'H a')}\r\n                                                        </div>\r\n                                                    </td>\r\n                                                )\r\n                                            }\r\n                                            else{\r\n                                                //Adding all the all-day events for the selected\r\n                                                //days of the week.\r\n                                                //Short hand order is top, right, bottom and left.\r\n                                                return(\r\n                                                    <td className=\"eventData\" key={j}>\r\n                                                        <CreateEvent selectedDate={dateSelected} hour={i-2}\r\n                                                                     day={j-1}  updateData={this.props.updateData}\r\n                                                                        view={\"day\"}/>\r\n                                                        <TimeIndicator mode={this.props.calendarMode} hour={i-2} day={j}\r\n                                                                       currentDate={this.props.selectedDate}/>\r\n                                                        <Container className=\"eventsContainer\" key={j}\r\n                                                                   style={getContainerStyle(cellValue)}>\r\n                                                            <Row className=\"eventsRow \" key={j}\r\n                                                                 style={getRowStyle(cellValue)}>\r\n                                                                {\r\n                                                                    cellValue.map((events, idx) => {\r\n                                                                        return(\r\n                                                                            <Col className=\"eventColumn\" key={idx}\r\n                                                                                 style={getColumnStyle(events)}>\r\n                                                                                <ShowEvent\r\n                                                                                    buttonStyle={getButtonStyle(events)}\r\n                                                                                    eventData={events}/>\r\n                                                                                <div className=\"eventSummary\">\r\n                                                                                    {events.summary}\r\n                                                                                </div>\r\n                                                                                <div className=\"eventTime\">\r\n                                                                                    {utcToZonedTime(parseISO\r\n                                                                                    (events.start.dateTime),\r\n                                                                                        events.start.timeZone)\r\n                                                                                        .toString()}\r\n                                                                                </div>\r\n                                                                            </Col>\r\n                                                                        )\r\n                                                                    })\r\n                                                                }\r\n                                                            </Row>\r\n                                                        </Container>\r\n                                                    </td>\r\n                                                )\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                </tr>\r\n                            )\r\n                        }\r\n                        else{\r\n                            return null;\r\n                        }\r\n                    })\r\n                }\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DayView;","import React from \"react\";\r\nimport {\r\n    startOfWeek, startOfDay, format, addDays, addHours, parseISO,\r\n    isSameDay, differenceInMinutes, isSameHour, getMinutes } from \"date-fns\";\r\nimport { utcToZonedTime } from \"date-fns-tz\";\r\nimport { Container, Row, Col, Table } from \"react-bootstrap\";\r\n\r\nimport CreateEvent from \"../CreateEvent/CreateEvent\";\r\nimport ShowEvent from \"../ShowEvent/ShowEvent\";\r\nimport TimeIndicator from \"../TimeIndicator/TimeIndicator\";\r\n\r\nclass WeekView extends React.Component {\r\n\r\n    render() {\r\n        let today = this.props.currentDate;\r\n        const myEvents = this.props.loadData;\r\n        const dateSelected = this.props.selectedDate;\r\n        const startOfTheWeek = startOfWeek(dateSelected);\r\n        const startOfTheDay = startOfDay(startOfTheWeek);\r\n\r\n        let weekMatrix = [];\r\n\r\n        //Week Matrix where Row 0 is the header of the Calendar\r\n        //and Row 1 is the row containing all the events of the\r\n        //respective days.\r\n        //Rows 2 through 26 contain the events of hours 0-24.\r\n        //Columns 1 through 8 contain the events of the 7-day\r\n        //period.\r\n\r\n        for(let i = 0; i < 26; i++){\r\n            let dayMatrix = [];\r\n            for(let j = 0; j < 8; j++){\r\n                let currentDay = addDays(startOfTheDay,j-1);\r\n                let currentHour = addHours(currentDay, i-2);\r\n                if(i === 0 && j === 0){\r\n                    //This is the empty spot on the Calendar\r\n                    //on the Top-Left-most cell.\r\n                    dayMatrix.push(currentDay);\r\n\r\n                }\r\n                else if(i === 0){\r\n                    //Header values, which includes Days of\r\n                    //the week.\r\n                    dayMatrix.push(currentDay);\r\n                }\r\n                else if(i === 1){\r\n                    if(j === 0){\r\n                        //Setting the TimeZone value.\r\n                        dayMatrix.push(dateSelected);\r\n                    }\r\n                    else{\r\n                        //Adding all the all-day events for\r\n                        //the selected days of the week.\r\n                        dayMatrix.push(myEvents.filter((item) => {\r\n                            if (item.start.dateTime === undefined) {\r\n                                if (isSameDay(currentHour, parseISO(item.start.date))) {\r\n                                    return {\r\n                                        \"event\": item\r\n                                    }\r\n                                } else {\r\n                                    return 0;\r\n                                }\r\n                            }\r\n                            else{\r\n                                return 0;\r\n                            }\r\n                        }));\r\n                    }\r\n                }\r\n                else if(j === 0){\r\n                    //Hour values of the calendar.\r\n                    dayMatrix.push(currentHour);\r\n                }\r\n                else{\r\n                    dayMatrix.push(myEvents.filter((item) => {\r\n                        let eventStart = utcToZonedTime(parseISO(item.start.dateTime), item.start.timeZone);\r\n                        //let eventEnd = utcToZonedTime(parseISO(item.end.dateTime), item.end.timeZone);\r\n                        if (isSameHour(currentHour, eventStart))\r\n                        {\r\n                            return {\r\n                                \"event\": item\r\n                            }\r\n                        } else {\r\n                            return 0\r\n                        }\r\n                    }))\r\n                }\r\n            }\r\n            weekMatrix.push(dayMatrix);\r\n        }\r\n\r\n        console.log(weekMatrix);\r\n\r\n        function getEventColor(evt){\r\n            return(evt.colorId);\r\n        }\r\n\r\n        function getEventDuration(evt){\r\n            let eventStart = getEventStart(evt);\r\n            let eventEnd = getEventEnd(evt);\r\n            return(differenceInMinutes(eventEnd, eventStart));\r\n        }\r\n\r\n        function getEventStart(evt){\r\n            return utcToZonedTime(parseISO(evt.start.dateTime), evt.start.timeZone);\r\n        }\r\n\r\n        function getEventEnd(evt){\r\n            return utcToZonedTime(parseISO(evt.end.dateTime), evt.end.timeZone);\r\n        }\r\n\r\n        function getLongestEventDuration(evtList){\r\n\r\n            let longestDuration = 0;\r\n            let duration = [];\r\n\r\n            duration.push(evtList.map(item => {\r\n                return(getEventDuration(item))\r\n            }));\r\n\r\n            for(let i = 0; i < duration.length; i++){\r\n                if (duration[i] > longestDuration){\r\n                    longestDuration = duration;\r\n                }\r\n            }\r\n\r\n            return longestDuration;\r\n\r\n        }\r\n\r\n        function getContainerStyle(evt){\r\n            if(evt.length){\r\n                //console.log(evt);\r\n                return({height: getLongestEventDuration(evt)*49/60+\"px\"});\r\n            }\r\n            else{\r\n                return({height: 0});\r\n            }\r\n        }\r\n\r\n        function getRowStyle(evt){\r\n            if(evt.length){\r\n                //console.log(evt);\r\n                return({height: getLongestEventDuration(evt)*49/60+\"px\"});\r\n            }\r\n            else{\r\n                return({height: 0});\r\n            }\r\n        }\r\n\r\n        function getColumnStyle(evt){\r\n            let eventDuration = getEventDuration(evt);\r\n            let eventColor = getEventColor(evt);\r\n            return({height: eventDuration*49/60+\"px\",\r\n                backgroundColor: eventColor,\r\n            marginTop: getMinutes(getEventStart(evt))*49/60+\"px\"});\r\n        }\r\n\r\n        function getButtonStyle(evt){\r\n            let eventDuration = getEventDuration(evt);\r\n            return({height: eventDuration*49/60+\"px\"});\r\n        }\r\n\r\n        function setCurrentDay(item) {\r\n            //console.log(item);\r\n            if(isSameDay(today, item)){\r\n                return {\r\n                    textDecoration: \"underline crimson\",\r\n                }\r\n            }\r\n            else{\r\n                return{\r\n                    textDecoration: \"none\"\r\n                }\r\n            }\r\n        }\r\n        return (\r\n            <Table bordered className=\"weekViewTable\">\r\n                <thead>\r\n                <tr>\r\n                    {\r\n                        weekMatrix[0].map((item, index) => {\r\n                            //Header values, which includes Days of\r\n                            //the week.\r\n                            if (index===0){\r\n                                return(\r\n                                    <th className=\"firsColumn\" key={index}>\r\n\r\n                                    </th>\r\n                                )\r\n                            }\r\n                            else{\r\n                                return (\r\n                                    <th style={setCurrentDay(item)} key={index}>\r\n                                        {format((item), 'dd ccc')}\r\n                                    </th>\r\n                                )\r\n                            }\r\n\r\n                        })\r\n                    }\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {\r\n                    weekMatrix.map((hourAndEvents, i) => {\r\n                        if(i!== 0){\r\n                            return(\r\n                                <tr  key={i}>\r\n                                    {\r\n                                        hourAndEvents.map((cellValue, j) => {\r\n                                            if(i === 1){\r\n                                                if(j === 0){\r\n                                                    //Setting the TimeZone value.\r\n                                                    return(\r\n                                                        <td className=\"timeZone\" key={j}>\r\n                                                            <div className=\"timeZoneValue\"  key={j}>\r\n                                                                {format(dateSelected, 'OOOO')}\r\n                                                            </div>\r\n                                                        </td>\r\n                                                    )\r\n                                                }\r\n                                                else{\r\n                                                    return(\r\n                                                        <td key={j}>\r\n\r\n                                                        </td>\r\n                                                    )\r\n                                                }\r\n\r\n                                            }\r\n                                            else if(j === 0){\r\n                                                //Hour values of the calendar.\r\n                                                return(\r\n                                                    <td className=\"hours\" key={j}>\r\n                                                        <div key={j}>\r\n                                                            {format(cellValue, 'H a')}\r\n                                                        </div>\r\n                                                    </td>\r\n                                                )\r\n                                            }\r\n                                            else{\r\n                                                //Adding all the all-day events for the selected\r\n                                                //days of the week.\r\n                                                //Short hand order is top, right, bottom and left.\r\n                                                return(\r\n                                                    <td className=\"eventData\" key={j}>\r\n                                                        <CreateEvent selectedDate={dateSelected} hour={i-2} day={j-1}\r\n                                                                        updateData={this.props.updateData}\r\n                                                                     view={\"week\"}/>\r\n                                                        <TimeIndicator mode={this.props.calendarMode} hour={i-2}\r\n                                                                       day={j-1}  currentDate={dateSelected}/>\r\n                                                        <Container className=\"eventsContainer\" key={j}\r\n                                                                   style={getContainerStyle(cellValue)}>\r\n                                                            <Row className=\"eventsRow \" key={j}\r\n                                                            style={getRowStyle(cellValue)}>\r\n                                                                {\r\n                                                                    cellValue.map((events, idx) => {\r\n                                                                        return(\r\n                                                                            <Col className=\"eventColumn\" key={idx}\r\n                                                                                 style={getColumnStyle(events)}>\r\n                                                                                <ShowEvent\r\n                                                                                    buttonStyle={getButtonStyle(events)}\r\n                                                                                    eventData={events}/>\r\n                                                                                <div className=\"eventSummary\">\r\n                                                                                    {events.summary}\r\n                                                                                </div>\r\n                                                                                <div className=\"eventTime\">\r\n                                                                                    {utcToZonedTime(parseISO(\r\n                                                                                        events.start.dateTime),\r\n                                                                                        events.start.timeZone)\r\n                                                                                        .toString()}\r\n                                                                                </div>\r\n                                                                            </Col>\r\n                                                                        )\r\n                                                                    })\r\n                                                                }\r\n                                                            </Row>\r\n                                                        </Container>\r\n                                                    </td>\r\n                                                )\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                </tr>\r\n                            )\r\n                        }\r\n                        else{\r\n                            return null;\r\n                        }\r\n                    })\r\n                }\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeekView;","import React from \"react\";\r\n//import {Table} from \"react-bootstrap\";\r\n\r\nclass MonthView extends React.Component {\r\n\r\n\r\n    render() {\r\n        return null;\r\n    };\r\n}\r\n\r\n\r\n\r\nexport default MonthView;","import React from \"react\";\r\nimport MonthView from \"components/FullCalendar/components/MonthView/MonthView\";\r\nimport { addMonths, startOfYear, format } from \"date-fns\"\r\nimport { Col, Row } from \"react-bootstrap\";\r\n\r\nclass YearView extends React.Component {\r\n\r\n    render() {\r\n\r\n        const startOfTheYear = startOfYear(this.props.selectedDate);\r\n        const allMonthsAndDays = [];\r\n        for (let i = 0; i < 12; i++){\r\n            let thisMonth = addMonths(startOfTheYear, i);\r\n            allMonthsAndDays.push(\r\n                <Col sm={6} key = {format(thisMonth, \"MMMM\")}>\r\n                    <span>  {format(thisMonth, \"MMMM\")}\r\n                        </span>\r\n                    <MonthView currentDate={this.props.currentDate}\r\n                                   selectedDate={thisMonth}/>\r\n                </Col>\r\n            )\r\n        }\r\n        return (\r\n                <Row>\r\n                    {allMonthsAndDays}\r\n                </Row>\r\n        );\r\n    };\r\n}\r\n\r\nexport default YearView;","import React from \"react\";\r\nimport Header from \"components/FullCalendar/components/Header/Header\";\r\nimport DayView from \"components/FullCalendar/components/DayView/DayView\";\r\nimport WeekView from \"components/FullCalendar/components/WeekView/WeekView\";\r\nimport MonthView from \"components/FullCalendar/components/MonthView/MonthView\";\r\nimport YearView from \"components/FullCalendar/components/YearView/YearView\";\r\nimport { addMonths, subMonths, addWeeks, subWeeks, addDays, subDays, addYears, subYears } from \"date-fns\";\r\nimport myEvents from \"assets/events/test_events.json\";\r\n\r\nclass FullCalendar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.switchDates = this.switchDates.bind(this);\r\n        this.switchView = this.switchView.bind(this);\r\n        this.updateData = this.updateData.bind(this);\r\n        this.selectedDayView = this.selectedDayView.bind(this)\r\n        this.state = {\r\n            currentDate: new Date(),\r\n            selectedDate: this.props.selectedDate,\r\n            calendarMode: \"Week\",\r\n            loadData: myEvents\r\n        };\r\n    }\r\n\r\n\r\n    switchView(data){\r\n        //console.log(data);\r\n        if (data === \"Today\") {\r\n            this.setState({\r\n                selectedDate: this.state.currentDate\r\n            });\r\n        }\r\n        else{\r\n            this.setState({\r\n                calendarMode: data\r\n            });\r\n        }\r\n    }\r\n\r\n    switchDates(arg) {\r\n        if (this.state.calendarMode === \"Week\") {\r\n            if (arg === \"Previous\") {\r\n                this.setState({selectedDate: subWeeks(this.state.selectedDate, 1)});\r\n            } else {\r\n                this.setState({selectedDate: addWeeks(this.state.selectedDate, 1)});\r\n            }\r\n        } else if (this.state.calendarMode === \"Day\") {\r\n            if (arg === \"Previous\") {\r\n                this.setState({selectedDate: subDays(this.state.selectedDate, 1)});\r\n            } else {\r\n                this.setState({selectedDate: addDays(this.state.selectedDate, 1)});\r\n            }\r\n        } else if (this.state.calendarMode === \"Month\") {\r\n            if (arg === \"Previous\") {\r\n                this.setState({selectedDate: subMonths(this.state.selectedDate, 1)});\r\n            } else {\r\n                this.setState({selectedDate: addMonths(this.state.selectedDate, 1)});\r\n            }\r\n        } else if (this.state.calendarMode === \"Year\") {\r\n            if (arg === \"Previous\") {\r\n                this.setState({selectedDate: subYears(this.state.selectedDate, 1)});\r\n            } else {\r\n                this.setState({selectedDate: addYears(this.state.selectedDate, 1)});\r\n            }\r\n        }\r\n    }\r\n\r\n    updateData(arg){\r\n        let fullData = []\r\n        let newData = this.state.loadData;\r\n        newData.forEach((item,index) => {\r\n            fullData.push(item);\r\n        })\r\n        fullData.push(arg);\r\n        this.setState({\r\n            loadData: fullData\r\n        });\r\n    }\r\n\r\n    selectedDayView(arg1){\r\n        this.setState({\r\n            calendarMode: \"Day\",\r\n            selectedDate: arg1\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        let view;\r\n\r\n        switch(this.state.calendarMode){\r\n            case \"Week\": view = <WeekView currentDate = {this.state.currentDate}\r\n                                          selectedDate = {this.state.selectedDate}\r\n                                          loadData = {this.state.loadData}\r\n                                          calendarMode = {this.state.calendarMode}\r\n                                          updateData = {this.updateData}\r\n                                          selectedDayView = {this.selectedDayView}/>\r\n                break;\r\n            case \"Month\": view = <MonthView currentDate = {this.state.currentDate}\r\n                                            selectedDate = {this.state.selectedDate}\r\n                                            loadData = {this.state.loadData} />\r\n                break;\r\n            case \"Day\": view = <DayView currentDate = {this.state.currentDate}\r\n                                        selectedDate = {this.state.selectedDate}\r\n                                        loadData = {this.state.loadData}\r\n                                        calendarMode = {this.state.calendarMode}\r\n                                        updateData = {this.updateData} />\r\n                break;\r\n            case \"Year\": view = <YearView currentDate = {this.state.currentDate}\r\n                                          selectedDate = {this.state.selectedDate}\r\n                                          loadData = {this.state.loadData} />\r\n                break;\r\n            default: view = <WeekView currentDate = {this.state.currentDate}\r\n                                      selectedDate = {this.state.selectedDate}\r\n                                      loadData = {this.state.loadData}\r\n                                      calendarMode = {this.state.calendarMode}\r\n                                      updateData = {this.updateData}\r\n                                      selectedDayView = {this.selectedDayView}/>\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Header handleUpdate = {this.switchDates}\r\n                        selectedDate = {this.state.selectedDate}\r\n                        switchView = {this.switchView}\r\n                        calendarMode = {this.state.calendarMode}\r\n                        setToday = {this.setToday}\r\n                        loadData = {this.state.loadData}\r\n\r\n                />\r\n                {view}\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default FullCalendar;","import React from \"react\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport MiniCalendar from \"./components/MiniCalendar/MiniCalendar\";\r\nimport FullCalendar from \"./components/FullCalendar/FullCalendar\";\r\nimport \"assets/scss/FullCalendar/FullCalendar.scss\";\r\n\r\nclass View extends React.Component{\r\n\r\n\r\n    render(){\r\n        if (this.props.mode === \"Event Calendar\"){\r\n            return(\r\n                <Col md={12}>\r\n                    <FullCalendar selectedDate={this.props.date}\r\n                                  updateDates={this.updateDates}/>\r\n                </Col>\r\n\r\n            );\r\n        }\r\n        else{\r\n            return(\r\n                <Col md={12}>\r\n                    <MiniCalendar mode=\"datePicker\" selectedDate={this.props.date}\r\n                                  updateDates={this.updateDates}/>\r\n                </Col>\r\n            );\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default View;","import React from 'react';\r\n//import \"assets/scss/MiniCalendar.scss\";\r\nimport View from \"View\";\r\n\r\n//import \"assets/scss/MiniCalendar/MiniCalendar.scss\";\r\n\r\nimport {\r\n    Container, Row, Col,\r\n    Navbar, Nav, NavDropdown,\r\n} from \"react-bootstrap\";\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            date : new Date(),\r\n            view: \"Event Calendar\"\r\n        }\r\n        this.switchView = this.switchView.bind(this);\r\n    }\r\n\r\n    switchView(arg){\r\n        this.setState({\r\n            view: arg\r\n        })\r\n    }\r\n\r\n    render(){\r\n\r\n\r\n        return(\r\n            <Container className=\"main-container\">\r\n                <Row>\r\n                    <Navbar onSelect={this.switchView} bg=\"transparent\" expand=\"lg\">\r\n                        <Navbar.Brand>Ultimate Calendar\r\n                            {' '}\r\n                        </Navbar.Brand>\r\n                        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                            <Nav className=\"mr-auto\">\r\n                                <NavDropdown title={this.state.view} id=\"basic-nav-dropdown\">\r\n                                    <NavDropdown.Item eventKey=\"Event Calendar\">Event Calendar</NavDropdown.Item>\r\n                                    <NavDropdown.Item eventKey=\"Date Picker\">Date Picker</NavDropdown.Item>\r\n                                </NavDropdown>\r\n                            </Nav>\r\n                        </Navbar.Collapse>\r\n                    </Navbar>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <h2>A Calendar library (WIP) made in React.</h2>\r\n                        <h3>by <a href=\"https://rounaksengupta.me\" >Rounak Sengupta</a></h3>\r\n                        <a href=\"https://github.com/FalseId0l/ultimate-calendar\">See on GitHub</a>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <View mode ={this.state.view} date={this.state.date}/>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'App';\nimport \"assets/scss/main.scss\";\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}